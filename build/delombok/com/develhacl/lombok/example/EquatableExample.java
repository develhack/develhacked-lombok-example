// Generated by delombok at Sat Aug 15 19:14:06 JST 2015
package com.develhacl.lombok.example;

import java.math.BigDecimal;
import com.develhack.annotation.feature.Equatable;
import com.develhack.annotation.feature.ExcludedFrom;
// Will evaluate the super#equals() if evaluateSuperclass is true.

/**
 * Example for the {@link Equatable @Equatable}.
 */
@Equatable(evaluateSuperclass = true)
public class EquatableExample extends BigDecimal {

	public EquatableExample(String paramString) {
		super(paramString);
	}
	// All non-transient fields will evaluated by the equals() and hashCode().
	private String foo;
	private String bar;
	private transient String baz; // Will not evaluated.
	@ExcludedFrom(Equatable.class)
	private String qux; // Will not evaluated.

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof EquatableExample)) return false;
		final EquatableExample other = (EquatableExample)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		if (!super.equals(o)) return false;
		final java.lang.Object this$foo = this.foo;
		final java.lang.Object other$foo = other.foo;
		if (this$foo == null ? other$foo != null : !this$foo.equals(other$foo)) return false;
		final java.lang.Object this$bar = this.bar;
		final java.lang.Object other$bar = other.bar;
		if (this$bar == null ? other$bar != null : !this$bar.equals(other$bar)) return false;
		return true;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	protected boolean canEqual(final java.lang.Object other) {
		return other instanceof EquatableExample;
	}

	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public int hashCode() {
		final int PRIME = 59;
		int result = 1;
		result = result * PRIME + super.hashCode();
		final java.lang.Object $foo = this.foo;
		result = result * PRIME + ($foo == null ? 0 : $foo.hashCode());
		final java.lang.Object $bar = this.bar;
		result = result * PRIME + ($bar == null ? 0 : $bar.hashCode());
		return result;
	}
}