// Generated by delombok at Sat Aug 15 19:14:06 JST 2015
package com.develhacl.lombok.example;

import com.develhack.annotation.assertion.Nonempty;
import com.develhack.annotation.assertion.Nullable;
import com.develhack.annotation.feature.Access;
import com.develhack.annotation.feature.Accessible;

/**
 * Example for the {@link Accessible @Accessible}.
 */
public class AccessibleExample {

	// Default visibility of accessor is public.
	@Accessible
	private String canAccessFromAnyone;
	// Can specify the visibility of accessor.
	@Accessible(get = Access.PUBLIC, set = Access.DEFAULT)
	private String canWriteFromSamePackageOnly;
	// The field having final modifier is supplemented the getter only.
	@Accessible
	private final String readOnly = "foo";
	// Can combine with the annotations for assertion.
	@Accessible
	@Nullable
	@Nonempty
	private String mustBeNonempty = "bar";
	// Javadoc on field will be used to the @param/@return tag of accessor.
	/**
	 * Javadoc on field
	 */
	@Accessible
	private String withJavadoc;

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getCanAccessFromAnyone() {
		return this.canAccessFromAnyone;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setCanAccessFromAnyone(String canAccessFromAnyone) {
		this.canAccessFromAnyone = canAccessFromAnyone;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getCanWriteFromSamePackageOnly() {
		return this.canWriteFromSamePackageOnly;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	void setCanWriteFromSamePackageOnly(String canWriteFromSamePackageOnly) {
		this.canWriteFromSamePackageOnly = canWriteFromSamePackageOnly;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getReadOnly() {
		return this.readOnly;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getMustBeNonempty() {
		return this.mustBeNonempty;
	}

	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setMustBeNonempty(@Nullable @Nonempty String mustBeNonempty) {
		com.develhack.Conditions.checkNonemptyIfNonnull("mustBeNonempty", mustBeNonempty);
		this.mustBeNonempty = mustBeNonempty;
	}

	/**
	 * @return Javadoc on field
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public String getWithJavadoc() {
		return this.withJavadoc;
	}

	/**
	 * @param withJavadoc Javadoc on field
	 */
	@java.lang.SuppressWarnings("all")
	@javax.annotation.Generated("lombok")
	public void setWithJavadoc(String withJavadoc) {
		this.withJavadoc = withJavadoc;
	}
}